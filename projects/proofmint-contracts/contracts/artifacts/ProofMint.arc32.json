{
  "hints": {
    "createApplication(address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "registerAccount(string,string,string,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "registerMint(uint64,address[],pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimNft(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimMbr(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "globalMintCount": {
          "type": "uint64",
          "key": "globalMintCount"
        },
        "externalPayeeAddress": {
          "type": "bytes",
          "key": "externalPayeeAddress"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwMy4wCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBjcmVhdGVBcHBsaWNhdGlvbihhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIGV4dGVybmFsUGF5ZWU6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMCAoZXh0ZXJuYWxQYXllZSkgZm9yIGNyZWF0ZUFwcGxpY2F0aW9uIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIGNyZWF0ZUFwcGxpY2F0aW9uKGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50IDEKCXJldHVybgoKLy8gY3JlYXRlQXBwbGljYXRpb24oZXh0ZXJuYWxQYXllZTogQWRkcmVzcyk6IHZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6MjcKCS8vIHRoaXMuZ2xvYmFsTWludENvdW50LnZhbHVlID0gMAoJYnl0ZSAweDY3NmM2ZjYyNjE2YzRkNjk2ZTc0NDM2Zjc1NmU3NCAvLyAiZ2xvYmFsTWludENvdW50IgoJaW50IDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjI4CgkvLyB0aGlzLmV4dGVybmFsUGF5ZWVBZGRyZXNzLnZhbHVlID0gZXh0ZXJuYWxQYXllZQoJYnl0ZSAweDY1Nzg3NDY1NzI2ZTYxNmM1MDYxNzk2NTY1NDE2NDY0NzI2NTczNzMgLy8gImV4dGVybmFsUGF5ZWVBZGRyZXNzIgoJZnJhbWVfZGlnIC0xIC8vIGV4dGVybmFsUGF5ZWU6IEFkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIHJlZ2lzdGVyQWNjb3VudChzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nKXZvaWQKKmFiaV9yb3V0ZV9yZWdpc3RlckFjY291bnQ6CgkvLyBjb250YWN0OiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDUKCWV4dHJhY3QgMiAwCgoJLy8gZW1haWw6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAoJZXh0cmFjdCAyIDAKCgkvLyB5ZWFyOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWV4dHJhY3QgMiAwCgoJLy8gbmFtZTogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIHJvbGU6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIHJlZ2lzdGVyQWNjb3VudChzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcsc3RyaW5nKXZvaWQKCWNhbGxzdWIgcmVnaXN0ZXJBY2NvdW50CglpbnQgMQoJcmV0dXJuCgovLyByZWdpc3RlckFjY291bnQocm9sZTogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHllYXI6IHN0cmluZywgZW1haWw6IHN0cmluZywgY29udGFjdDogc3RyaW5nKTogdm9pZApyZWdpc3RlckFjY291bnQ6Cglwcm90byA1IDAKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6MzIKCS8vIGFzc2VydCh0aGlzLnVzZXJzKHRoaXMudHhuLnNlbmRlcikuZXhpc3RzID09PSBmYWxzZSwgJ1VzZXIgYWxyZWFkeSBleGlzdHMnKQoJdHhuIFNlbmRlcgoJYm94X2xlbgoJc3dhcAoJcG9wCglpbnQgMAoJPT0KCgkvLyBVc2VyIGFscmVhZHkgZXhpc3RzCglhc3NlcnQKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjMzCgkvLyByb2xlID09PSAnaW5zdGl0dXRpb24nIHx8IHJvbGUgPT09ICdjb21wYW55JyB8fCByb2xlID09PSAnZG9hJyB8fCByb2xlID09PSAnY29tbXVuaXR5JwoJZnJhbWVfZGlnIC0xIC8vIHJvbGU6IHN0cmluZwoJYnl0ZSAweDY5NmU3Mzc0Njk3NDc1NzQ2OTZmNmUgLy8gImluc3RpdHV0aW9uIgoJPT0KCWR1cAoJYm56ICpza2lwX29yMAoJZnJhbWVfZGlnIC0xIC8vIHJvbGU6IHN0cmluZwoJYnl0ZSAweDYzNmY2ZDcwNjE2ZTc5IC8vICJjb21wYW55IgoJPT0KCXx8Cgoqc2tpcF9vcjA6CglkdXAKCWJueiAqc2tpcF9vcjEKCWZyYW1lX2RpZyAtMSAvLyByb2xlOiBzdHJpbmcKCWJ5dGUgMHg2NDZmNjEgLy8gImRvYSIKCT09Cgl8fAoKKnNraXBfb3IxOgoJZHVwCglibnogKnNraXBfb3IyCglmcmFtZV9kaWcgLTEgLy8gcm9sZTogc3RyaW5nCglieXRlIDB4NjM2ZjZkNmQ3NTZlNjk3NDc5IC8vICJjb21tdW5pdHkiCgk9PQoJfHwKCipza2lwX29yMjoKCWJ6ICppZjBfZWxzZWlmMV9jb25kaXRpb24KCgkvLyAqaWYwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czozNAoJLy8gdGhpcy51c2Vycyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0geyByb2xlOiByb2xlLCBuYW1lOiBuYW1lLCB5ZWFyOiB5ZWFyLCBlbWFpbDogZW1haWwsIGNvbnRhY3Q6IGNvbnRhY3QgfQoJdHhuIFNlbmRlcgoJZHVwCglib3hfZGVsCglwb3AKCWJ5dGUgMHggLy8gaW5pdGlhbCBoZWFkCglieXRlIDB4IC8vIGluaXRpYWwgdGFpbAoJYnl0ZSAweDAwMGEgLy8gaW5pdGlhbCBoZWFkIG9mZnNldAoJZnJhbWVfZGlnIC0xIC8vIHJvbGU6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNhbGxzdWIgKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgLTIgLy8gbmFtZTogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY2FsbHN1YiAqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMyAvLyB5ZWFyOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViICpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIC00IC8vIGVtYWlsOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViICpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIC01IC8vIGNvbnRhY3Q6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNhbGxzdWIgKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50Cglwb3AgLy8gcG9wIGhlYWQgb2Zmc2V0Cgljb25jYXQgLy8gY29uY2F0IGhlYWQgYW5kIHRhaWwKCWJveF9wdXQKCWIgKmlmMF9lbmQKCippZjBfZWxzZWlmMV9jb25kaXRpb246CgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6MzUKCS8vIHJvbGUgPT09ICd1c2VyJwoJZnJhbWVfZGlnIC0xIC8vIHJvbGU6IHN0cmluZwoJYnl0ZSAweDc1NzM2NTcyIC8vICJ1c2VyIgoJPT0KCWJ6ICppZjBfZW5kCgoJLy8gKmlmMF9lbHNlaWYxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czozNgoJLy8gdGhpcy51c2Vycyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0geyByb2xlOiAndXNlcicsIG5hbWU6IG5hbWUsIHllYXI6ICcnLCBlbWFpbDogZW1haWwsIGNvbnRhY3Q6IGNvbnRhY3QgfQoJdHhuIFNlbmRlcgoJZHVwCglib3hfZGVsCglwb3AKCWJ5dGUgMHggLy8gaW5pdGlhbCBoZWFkCglieXRlIDB4IC8vIGluaXRpYWwgdGFpbAoJYnl0ZSAweDAwMGEgLy8gaW5pdGlhbCBoZWFkIG9mZnNldAoJYnl0ZSAweDAwMDQ3NTczNjU3MgoJY2FsbHN1YiAqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMiAvLyBuYW1lOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViICpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJYnl0ZSAweDAwMDAKCWNhbGxzdWIgKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgLTQgLy8gZW1haWw6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNhbGxzdWIgKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgLTUgLy8gY29udGFjdDogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY2FsbHN1YiAqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCXBvcCAvLyBwb3AgaGVhZCBvZmZzZXQKCWNvbmNhdCAvLyBjb25jYXQgaGVhZCBhbmQgdGFpbAoJYm94X3B1dAoKKmlmMF9lbmQ6CglyZXRzdWIKCi8vIHJlZ2lzdGVyTWludCh1aW50NjQsYWRkcmVzc1tdLHBheSl2b2lkCiphYmlfcm91dGVfcmVnaXN0ZXJNaW50OgoJLy8gY29zdHM6IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDAgKGNvc3RzKSBmb3IgcmVnaXN0ZXJNaW50IG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGFkZHJlc3NlczogYWRkcmVzc1tdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIGFzc2V0SWQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgcmVnaXN0ZXJNaW50KHVpbnQ2NCxhZGRyZXNzW10scGF5KXZvaWQKCWNhbGxzdWIgcmVnaXN0ZXJNaW50CglpbnQgMQoJcmV0dXJuCgovLyByZWdpc3Rlck1pbnQoYXNzZXRJZDogQXNzZXRJRCwgYWRkcmVzc2VzOiBBZGRyZXNzW10sIGNvc3RzOiBQYXlUeG4pOiB2b2lkCnJlZ2lzdGVyTWludDoKCXByb3RvIDMgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXBuIDQKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NDEKCS8vIGFzc2VydChhZGRyZXNzZXMubGVuZ3RoID4gMCwgJ05vIGFkZHJlc3NlcyBwcm92aWRlZCcpCglmcmFtZV9kaWcgLTIgLy8gYWRkcmVzc2VzOiBBZGRyZXNzW10KCWxlbgoJaW50IDMyCgkvCglpbnQgMAoJPgoKCS8vIE5vIGFkZHJlc3NlcyBwcm92aWRlZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjQyCgkvLyBhc3NlcnQoYXNzZXRJZC5jbGF3YmFjayA9PT0gdGhpcy5hcHAuYWRkcmVzcywgJ0NsYXdiYWNrIGFkZHJlc3MgbXVzdCBiZSB0aGUgYXBwIGFkZHJlc3MnKQoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0SWQ6IEFzc2V0SUQKCWFzc2V0X3BhcmFtc19nZXQgQXNzZXRDbGF3YmFjawoJcG9wCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyBDbGF3YmFjayBhZGRyZXNzIG11c3QgYmUgdGhlIGFwcCBhZGRyZXNzCglhc3NlcnQKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NDMKCS8vIGFzc2VydChhc3NldElkLmNyZWF0b3IuYXNzZXRCYWxhbmNlKGFzc2V0SWQpID49IGFkZHJlc3Nlcy5sZW5ndGgsICdOb3QgZW5vdWdoIGFzc2V0cycpCglmcmFtZV9kaWcgLTEgLy8gYXNzZXRJZDogQXNzZXRJRAoJYXNzZXRfcGFyYW1zX2dldCBBc3NldENyZWF0b3IKCXBvcAoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0SWQ6IEFzc2V0SUQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJcG9wCglmcmFtZV9kaWcgLTIgLy8gYWRkcmVzc2VzOiBBZGRyZXNzW10KCWxlbgoJaW50IDMyCgkvCgk+PQoKCS8vIE5vdCBlbm91Z2ggYXNzZXRzCglhc3NlcnQKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NDQKCS8vIGFzc2VydCh0aGlzLm1pbnRzKGFzc2V0SWQuaWQpLmV4aXN0cyA9PT0gZmFsc2UsICdNaW50IGFscmVhZHkgZXhpc3RzJykKCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkOiBBc3NldElECglpdG9iCglib3hfbGVuCglzd2FwCglwb3AKCWludCAwCgk9PQoKCS8vIE1pbnQgYWxyZWFkeSBleGlzdHMKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo0NQoJLy8gbWludENvdW50ID0gdGhpcy5nbG9iYWxNaW50Q291bnQudmFsdWUgKyAxCglieXRlIDB4Njc2YzZmNjI2MTZjNGQ2OTZlNzQ0MzZmNzU2ZTc0IC8vICJnbG9iYWxNaW50Q291bnQiCglhcHBfZ2xvYmFsX2dldAoJaW50IDEKCSsKCWZyYW1lX2J1cnkgMCAvLyBtaW50Q291bnQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo0NgoJLy8gdGhpcy5nbG9iYWxNaW50Q291bnQudmFsdWUgPSBtaW50Q291bnQKCWJ5dGUgMHg2NzZjNmY2MjYxNmM0ZDY5NmU3NDQzNmY3NTZlNzQgLy8gImdsb2JhbE1pbnRDb3VudCIKCWZyYW1lX2RpZyAwIC8vIG1pbnRDb3VudDogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo0NwoJLy8gY29zdCA9IDI1MDAgKyAzMjAwICsgMzQgKiBhZGRyZXNzZXMubGVuZ3RoICogNDAwICsgYWRkcmVzc2VzLmxlbmd0aCAqIDIwNTAwMCArIDEwMDAKCWludCA1NzAwCglpbnQgMzQKCWZyYW1lX2RpZyAtMiAvLyBhZGRyZXNzZXM6IEFkZHJlc3NbXQoJbGVuCglpbnQgMzIKCS8KCSoKCWludCA0MDAKCSoKCSsKCWZyYW1lX2RpZyAtMiAvLyBhZGRyZXNzZXM6IEFkZHJlc3NbXQoJbGVuCglpbnQgMzIKCS8KCWludCAyMDUwMDAKCSoKCSsKCWludCAxMDAwCgkrCglmcmFtZV9idXJ5IDEgLy8gY29zdDogdWludDY0CgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjQ4CgkvLyB2ZXJpZnlQYXlUeG4oY29zdHMsIHsgYW1vdW50OiB7IGdyZWF0ZXJUaGFuRXF1YWxUbzogY29zdCB9LCByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcyB9KQoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0zIC8vIGNvc3RzOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJZnJhbWVfZGlnIDEgLy8gY29zdDogdWludDY0Cgk+PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoiY29zdHMiLCJmaWVsZCI6ImFtb3VudCIsImNvbmRpdGlvbiI6ImdyZWF0ZXJUaGFuRXF1YWxUbyIsImV4cGVjdGVkIjoiPj1jb3N0In0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0zIC8vIGNvc3RzOiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6ImNvc3RzIiwiZmllbGQiOiJyZWNlaXZlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NDkKCS8vIHNlbmRQYXltZW50KHsgcmVjZWl2ZXI6IHRoaXMuZXh0ZXJuYWxQYXllZUFkZHJlc3MudmFsdWUsIGFtb3VudDogYWRkcmVzc2VzLmxlbmd0aCAqIDEwMDAsIGZlZTogMTAwMCB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo0OQoJLy8gcmVjZWl2ZXI6IHRoaXMuZXh0ZXJuYWxQYXllZUFkZHJlc3MudmFsdWUKCWJ5dGUgMHg2NTc4NzQ2NTcyNmU2MTZjNTA2MTc5NjU2NTQxNjQ2NDcyNjU3MzczIC8vICJleHRlcm5hbFBheWVlQWRkcmVzcyIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjQ5CgkvLyBhbW91bnQ6IGFkZHJlc3Nlcy5sZW5ndGggKiAxMDAwCglmcmFtZV9kaWcgLTIgLy8gYWRkcmVzc2VzOiBBZGRyZXNzW10KCWxlbgoJaW50IDMyCgkvCglpbnQgMTAwMAoJKgoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NDkKCS8vIGZlZTogMTAwMAoJaW50IDEwMDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo1MAoJLy8gYWRkcmVzc0NsYWltczogQWRkcmVzc0NsYWltW10gPSBbXQoJYnl0ZSAweAoJZnJhbWVfYnVyeSAyIC8vIGFkZHJlc3NDbGFpbXM6IEFkZHJlc3NDbGFpbVtdCgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjUxCgkvLyBmb3IgKGxldCBpID0gMDsgaSA8IGFkZHJlc3Nlcy5sZW5ndGg7IGkgKz0gMSkKCWludCAwCglmcmFtZV9idXJ5IDMgLy8gaTogdWludDY0CgoqZm9yXzA6CgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NTEKCS8vIGkgPCBhZGRyZXNzZXMubGVuZ3RoCglmcmFtZV9kaWcgMyAvLyBpOiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyBhZGRyZXNzZXM6IEFkZHJlc3NbXQoJbGVuCglpbnQgMzIKCS8KCTwKCWJ6ICpmb3JfMF9lbmQKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NTIKCS8vIG9uZUFkZHJlc3NDbGFpbTogQWRkcmVzc0NsYWltID0geyBhZGRyZXNzOiBhZGRyZXNzZXNbaV0sIG5mdENsYWltOiAwLCBtYnJDbGFpbTogMCB9CglmcmFtZV9kaWcgLTIgLy8gYWRkcmVzc2VzOiBBZGRyZXNzW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnQgMCAvLyBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDMgLy8gaTogdWludDY0CglpbnQgMzIKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50IDMyCglleHRyYWN0MwoJYnl0ZSAweDAwCgljb25jYXQKCWJ5dGUgMHgwMAoJY29uY2F0CglmcmFtZV9idXJ5IDQgLy8gb25lQWRkcmVzc0NsYWltOiBBZGRyZXNzQ2xhaW0KCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NTMKCS8vIGFkZHJlc3NDbGFpbXMucHVzaChvbmVBZGRyZXNzQ2xhaW0pCglmcmFtZV9kaWcgMiAvLyBhZGRyZXNzQ2xhaW1zOiBBZGRyZXNzQ2xhaW1bXQoJZnJhbWVfZGlnIDQgLy8gb25lQWRkcmVzc0NsYWltOiBBZGRyZXNzQ2xhaW0KCWNvbmNhdAoJZnJhbWVfYnVyeSAyIC8vIGFkZHJlc3NDbGFpbXM6IEFkZHJlc3NDbGFpbVtdCgoqZm9yXzBfY29udGludWU6CgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NTEKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDMgLy8gaTogdWludDY0CglpbnQgMQoJKwoJZnJhbWVfYnVyeSAzIC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzAKCipmb3JfMF9lbmQ6CgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NTUKCS8vIHRoaXMubWludHMoYXNzZXRJZC5pZCkudmFsdWUgPSBhZGRyZXNzQ2xhaW1zCglmcmFtZV9kaWcgLTEgLy8gYXNzZXRJZDogQXNzZXRJRAoJaXRvYgoJZHVwCglib3hfZGVsCglwb3AKCWZyYW1lX2RpZyAyIC8vIGFkZHJlc3NDbGFpbXM6IEFkZHJlc3NDbGFpbVtdCglkdXAKCWxlbgoJaW50IDM0CgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cglib3hfcHV0CglyZXRzdWIKCi8vIGNsYWltTmZ0KHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfY2xhaW1OZnQ6CgkvLyBhc3NldElkOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGNsYWltTmZ0KHVpbnQ2NCl2b2lkCgljYWxsc3ViIGNsYWltTmZ0CglpbnQgMQoJcmV0dXJuCgovLyBjbGFpbU5mdChhc3NldElkOiBBc3NldElEKTogdm9pZApjbGFpbU5mdDoKCXByb3RvIDEgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjU5CgkvLyBhc3NlcnQodGhpcy5taW50cyhhc3NldElkLmlkKS5leGlzdHMsICdObyBtaW50IGZvdW5kJykKCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkOiBBc3NldElECglpdG9iCglib3hfbGVuCglzd2FwCglwb3AKCgkvLyBObyBtaW50IGZvdW5kCglhc3NlcnQKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NjAKCS8vIGFzc2VydChhc3NldElkLmNsYXdiYWNrID09PSB0aGlzLmFwcC5hZGRyZXNzLCAnQ2xhd2JhY2sgYWRkcmVzcyBtdXN0IGJlIHRoZSBhcHAgYWRkcmVzcycpCglmcmFtZV9kaWcgLTEgLy8gYXNzZXRJZDogQXNzZXRJRAoJYXNzZXRfcGFyYW1zX2dldCBBc3NldENsYXdiYWNrCglwb3AKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIENsYXdiYWNrIGFkZHJlc3MgbXVzdCBiZSB0aGUgYXBwIGFkZHJlc3MKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo2MQoJLy8gY2hlY2tSZXN1bHQgPSB0aGlzLmNoZWNrQWRkcmVzc0F2YWlsYWJsZShhc3NldElkLCB0aGlzLnR4bi5zZW5kZXIpCgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gYXNzZXRJZDogQXNzZXRJRAoJY2FsbHN1YiBjaGVja0FkZHJlc3NBdmFpbGFibGUKCWZyYW1lX2J1cnkgMCAvLyBjaGVja1Jlc3VsdDogKGJvb2wsdWludDY0LChhZGRyZXNzLHVpbnQ4LHVpbnQ4KSkKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NjIKCS8vIGFzc2VydChjaGVja1Jlc3VsdFswXSwgJ0FkZHJlc3Mgbm90IGZvdW5kJykKCWZyYW1lX2RpZyAwIC8vIGNoZWNrUmVzdWx0OiAoYm9vbCx1aW50NjQsKGFkZHJlc3MsdWludDgsdWludDgpKQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWludCAwCglnZXRiaXQKCgkvLyBBZGRyZXNzIG5vdCBmb3VuZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjYzCgkvLyBhc3NlcnQoY2hlY2tSZXN1bHRbMl0ubmZ0Q2xhaW0gPT09IDAsICdBZGRyZXNzIGFscmVhZHkgY2xhaW1lZCcpCglmcmFtZV9kaWcgMCAvLyBjaGVja1Jlc3VsdDogKGJvb2wsdWludDY0LChhZGRyZXNzLHVpbnQ4LHVpbnQ4KSkKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDQxIDEKCWJ0b2kKCWludCAwCgk9PQoKCS8vIEFkZHJlc3MgYWxyZWFkeSBjbGFpbWVkCglhc3NlcnQKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NjQKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIuaXNPcHRlZEluVG9Bc3NldChhc3NldElkKSwgJ0FkZHJlc3Mgbm90IG9wdGVkIGluIHRvIGFzc2V0JykKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkOiBBc3NldElECglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCXN3YXAKCXBvcAoKCS8vIEFkZHJlc3Mgbm90IG9wdGVkIGluIHRvIGFzc2V0Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NjUKCS8vIHRoaXMuY2hhbmdlQWRkcmVzc0NsYWltTmZ0KGFzc2V0SWQsIGNoZWNrUmVzdWx0WzFdKQoJZnJhbWVfZGlnIDAgLy8gY2hlY2tSZXN1bHQ6IChib29sLHVpbnQ2NCwoYWRkcmVzcyx1aW50OCx1aW50OCkpCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAxIDgKCWJ0b2kKCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkOiBBc3NldElECgljYWxsc3ViIGNoYW5nZUFkZHJlc3NDbGFpbU5mdAoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo2NgoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYXNzZXRTZW5kZXI6IGFzc2V0SWQuY3JlYXRvciwKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgIGFzc2V0QW1vdW50OiAxLAoJLy8gICAgICAgeGZlckFzc2V0OiBhc3NldElkLAoJLy8gICAgICAgZmVlOiAxMDAwLAoJLy8gICAgICAgbm90ZTogJ2NsYWltbmZ0LScgKyBhc3NldElkLmlkLnRvU3RyaW5nKCksCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo2NwoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NjgKCS8vIGFzc2V0U2VuZGVyOiBhc3NldElkLmNyZWF0b3IKCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkOiBBc3NldElECglhc3NldF9wYXJhbXNfZ2V0IEFzc2V0Q3JlYXRvcgoJcG9wCglpdHhuX2ZpZWxkIEFzc2V0U2VuZGVyCgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjY5CgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo3MAoJLy8gYXNzZXRBbW91bnQ6IDEKCWludCAxCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjcxCgkvLyB4ZmVyQXNzZXQ6IGFzc2V0SWQKCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkOiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo3MgoJLy8gZmVlOiAxMDAwCglpbnQgMTAwMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NzMKCS8vIG5vdGU6ICdjbGFpbW5mdC0nICsgYXNzZXRJZC5pZC50b1N0cmluZygpCglieXRlIDB4NjM2YzYxNjk2ZDZlNjY3NDJkIC8vICJjbGFpbW5mdC0iCglmcmFtZV9kaWcgLTEgLy8gYXNzZXRJZDogQXNzZXRJRAoJY2FsbHN1YiAqaXRvYQoJY29uY2F0CglpdHhuX2ZpZWxkIE5vdGUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIGNsYWltTWJyKHVpbnQ2NCxhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9jbGFpbU1icjoKCS8vIGFkZHJlc3M6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMCAoYWRkcmVzcykgZm9yIGNsYWltTWJyIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBhc3NldElkOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGNsYWltTWJyKHVpbnQ2NCxhZGRyZXNzKXZvaWQKCWNhbGxzdWIgY2xhaW1NYnIKCWludCAxCglyZXR1cm4KCi8vIGNsYWltTWJyKGFzc2V0SWQ6IEFzc2V0SUQsIGFkZHJlc3M6IEFkZHJlc3MpOiB2b2lkCmNsYWltTWJyOgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6NzgKCS8vIGFzc2VydCh0aGlzLm1pbnRzKGFzc2V0SWQuaWQpLmV4aXN0cywgJ05vIG1pbnQgZm91bmQnKQoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0SWQ6IEFzc2V0SUQKCWl0b2IKCWJveF9sZW4KCXN3YXAKCXBvcAoKCS8vIE5vIG1pbnQgZm91bmQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo3OQoJLy8gYXNzZXJ0KGFzc2V0SWQuY2xhd2JhY2sgPT09IHRoaXMuYXBwLmFkZHJlc3MsICdDbGF3YmFjayBhZGRyZXNzIG11c3QgYmUgdGhlIGFwcCBhZGRyZXNzJykKCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkOiBBc3NldElECglhc3NldF9wYXJhbXNfZ2V0IEFzc2V0Q2xhd2JhY2sKCXBvcAoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gQ2xhd2JhY2sgYWRkcmVzcyBtdXN0IGJlIHRoZSBhcHAgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjgwCgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmV4dGVybmFsUGF5ZWVBZGRyZXNzLnZhbHVlLCAnT25seSBleHRlcm5hbCBwYXllZSBjYW4gY2xhaW0nKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDY1Nzg3NDY1NzI2ZTYxNmM1MDYxNzk2NTY1NDE2NDY0NzI2NTczNzMgLy8gImV4dGVybmFsUGF5ZWVBZGRyZXNzIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gT25seSBleHRlcm5hbCBwYXllZSBjYW4gY2xhaW0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo4MQoJLy8gY2hlY2tSZXN1bHQgPSB0aGlzLmNoZWNrQWRkcmVzc0F2YWlsYWJsZShhc3NldElkLCBhZGRyZXNzKQoJZnJhbWVfZGlnIC0yIC8vIGFkZHJlc3M6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkOiBBc3NldElECgljYWxsc3ViIGNoZWNrQWRkcmVzc0F2YWlsYWJsZQoJZnJhbWVfYnVyeSAwIC8vIGNoZWNrUmVzdWx0OiAoYm9vbCx1aW50NjQsKGFkZHJlc3MsdWludDgsdWludDgpKQoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo4MgoJLy8gYXNzZXJ0KGNoZWNrUmVzdWx0WzBdLCAnQWRkcmVzcyBub3QgZm91bmQnKQoJZnJhbWVfZGlnIDAgLy8gY2hlY2tSZXN1bHQ6IChib29sLHVpbnQ2NCwoYWRkcmVzcyx1aW50OCx1aW50OCkpCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDAKCWdldGJpdAoKCS8vIEFkZHJlc3Mgbm90IGZvdW5kCglhc3NlcnQKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6ODMKCS8vIGFzc2VydChjaGVja1Jlc3VsdFsyXS5tYnJDbGFpbSA9PT0gMCwgJ0FkZHJlc3MgYWxyZWFkeSBjbGFpbWVkJykKCWZyYW1lX2RpZyAwIC8vIGNoZWNrUmVzdWx0OiAoYm9vbCx1aW50NjQsKGFkZHJlc3MsdWludDgsdWludDgpKQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgNDIgMQoJYnRvaQoJaW50IDAKCT09CgoJLy8gQWRkcmVzcyBhbHJlYWR5IGNsYWltZWQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo4NAoJLy8gdGhpcy5jaGFuZ2VBZGRyZXNzQ2xhaW1NYnIoYXNzZXRJZCwgY2hlY2tSZXN1bHRbMV0pCglmcmFtZV9kaWcgMCAvLyBjaGVja1Jlc3VsdDogKGJvb2wsdWludDY0LChhZGRyZXNzLHVpbnQ4LHVpbnQ4KSkKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDEgOAoJYnRvaQoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0SWQ6IEFzc2V0SUQKCWNhbGxzdWIgY2hhbmdlQWRkcmVzc0NsYWltTWJyCgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjg1CgkvLyBzZW5kUGF5bWVudCh7IHJlY2VpdmVyOiBhZGRyZXNzLCBhbW91bnQ6IDIwMjAwMCwgZmVlOiAxMDAwLCBub3RlOiAnY2xhaW1tYnItJyArIGFzc2V0SWQuaWQudG9TdHJpbmcoKSB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo4NQoJLy8gcmVjZWl2ZXI6IGFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBhZGRyZXNzOiBBZGRyZXNzCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjg1CgkvLyBhbW91bnQ6IDIwMjAwMAoJaW50IDIwMjAwMAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6ODUKCS8vIGZlZTogMTAwMAoJaW50IDEwMDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjg1CgkvLyBub3RlOiAnY2xhaW1tYnItJyArIGFzc2V0SWQuaWQudG9TdHJpbmcoKQoJYnl0ZSAweDYzNmM2MTY5NmQ2ZDYyNzIyZCAvLyAiY2xhaW1tYnItIgoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0SWQ6IEFzc2V0SUQKCWNhbGxzdWIgKml0b2EKCWNvbmNhdAoJaXR4bl9maWVsZCBOb3RlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBjaGFuZ2VBZGRyZXNzQ2xhaW1OZnQoYXNzZXRJZDogQXNzZXRJRCwgYWRkcmVzc0luZGV4OiB1aW50NjQpOiB2b2lkCmNoYW5nZUFkZHJlc3NDbGFpbU5mdDoKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czo4OQoJLy8gdGhpcy5taW50cyhhc3NldElkLmlkKS52YWx1ZVthZGRyZXNzSW5kZXhdID0gewoJLy8gICAgICAgYWRkcmVzczogdGhpcy5taW50cyhhc3NldElkLmlkKS52YWx1ZVthZGRyZXNzSW5kZXhdLmFkZHJlc3MsCgkvLyAgICAgICBuZnRDbGFpbTogMSwKCS8vICAgICAgIG1ickNsYWltOiB0aGlzLm1pbnRzKGFzc2V0SWQuaWQpLnZhbHVlW2FkZHJlc3NJbmRleF0ubWJyQ2xhaW0sCgkvLyAgICAgfQoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0SWQ6IEFzc2V0SUQKCWl0b2IKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMubWludHMoYXNzZXRJZC5pZCkudmFsdWUKCWFzc2VydAoJZXh0cmFjdCAyIDAKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnQgMCAvLyBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIC0yIC8vIGFkZHJlc3NJbmRleDogdWludDY0CglpbnQgMzQKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0SWQ6IEFzc2V0SUQKCWl0b2IKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMubWludHMoYXNzZXRJZC5pZCkudmFsdWUKCWFzc2VydAoJZXh0cmFjdCAyIDAKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnQgMCAvLyBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIC0yIC8vIGFkZHJlc3NJbmRleDogdWludDY0CglpbnQgMzQKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJaW50IDAgLy8gaGVhZE9mZnNldAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50IDMyCglleHRyYWN0MwoJYnl0ZSAweDAxCgljb25jYXQKCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkOiBBc3NldElECglpdG9iCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLm1pbnRzKGFzc2V0SWQuaWQpLnZhbHVlCglhc3NlcnQKCWV4dHJhY3QgMiAwCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDAgLy8gaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAtMiAvLyBhZGRyZXNzSW5kZXg6IHVpbnQ2NAoJaW50IDM0CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWludCAzMyAvLyBoZWFkT2Zmc2V0CgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnQgMQoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWV4dHJhY3QgNyAxCgljb25jYXQKCXJlcGxhY2UzCglmcmFtZV9kaWcgLTEgLy8gYXNzZXRJZDogQXNzZXRJRAoJaXRvYgoJZHVwCglib3hfZGVsCglwb3AKCXN3YXAKCWR1cAoJbGVuCglpbnQgMzQKCS8KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWJveF9wdXQKCXJldHN1YgoKLy8gY2hhbmdlQWRkcmVzc0NsYWltTWJyKGFzc2V0SWQ6IEFzc2V0SUQsIGFkZHJlc3NJbmRleDogdWludDY0KTogdm9pZApjaGFuZ2VBZGRyZXNzQ2xhaW1NYnI6Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6OTcKCS8vIHRoaXMubWludHMoYXNzZXRJZC5pZCkudmFsdWVbYWRkcmVzc0luZGV4XSA9IHsKCS8vICAgICAgIGFkZHJlc3M6IHRoaXMubWludHMoYXNzZXRJZC5pZCkudmFsdWVbYWRkcmVzc0luZGV4XS5hZGRyZXNzLAoJLy8gICAgICAgbmZ0Q2xhaW06IHRoaXMubWludHMoYXNzZXRJZC5pZCkudmFsdWVbYWRkcmVzc0luZGV4XS5uZnRDbGFpbSwKCS8vICAgICAgIG1ickNsYWltOiAxLAoJLy8gICAgIH0KCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkOiBBc3NldElECglpdG9iCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLm1pbnRzKGFzc2V0SWQuaWQpLnZhbHVlCglhc3NlcnQKCWV4dHJhY3QgMiAwCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDAgLy8gaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAtMiAvLyBhZGRyZXNzSW5kZXg6IHVpbnQ2NAoJaW50IDM0CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkOiBBc3NldElECglpdG9iCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLm1pbnRzKGFzc2V0SWQuaWQpLnZhbHVlCglhc3NlcnQKCWV4dHJhY3QgMiAwCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDAgLy8gaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAtMiAvLyBhZGRyZXNzSW5kZXg6IHVpbnQ2NAoJaW50IDM0CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWludCAwIC8vIGhlYWRPZmZzZXQKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludCAzMgoJZXh0cmFjdDMKCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkOiBBc3NldElECglpdG9iCglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLm1pbnRzKGFzc2V0SWQuaWQpLnZhbHVlCglhc3NlcnQKCWV4dHJhY3QgMiAwCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDAgLy8gaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAtMiAvLyBhZGRyZXNzSW5kZXg6IHVpbnQ2NAoJaW50IDM0CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWludCAzMiAvLyBoZWFkT2Zmc2V0CgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnQgMQoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWV4dHJhY3QgNyAxCgljb25jYXQKCWJ5dGUgMHgwMQoJY29uY2F0CglyZXBsYWNlMwoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0SWQ6IEFzc2V0SUQKCWl0b2IKCWR1cAoJYm94X2RlbAoJcG9wCglzd2FwCglkdXAKCWxlbgoJaW50IDM0CgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cglib3hfcHV0CglyZXRzdWIKCi8vIGNoZWNrQWRkcmVzc0F2YWlsYWJsZShhc3NldElkOiBBc3NldElELCBhZGRyZXNzOiBBZGRyZXNzKTogW2Jvb2xlYW4sIHVpbnQ2NCwgQWRkcmVzc0NsYWltXQpjaGVja0FkZHJlc3NBdmFpbGFibGU6Cglwcm90byAyIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwbiA1CgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjEwNQoJLy8gYWRkcmVzc2VzID0gdGhpcy5taW50cyhhc3NldElkLmlkKS52YWx1ZQoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0SWQ6IEFzc2V0SUQKCWl0b2IKCWZyYW1lX2J1cnkgMCAvLyBzdG9yYWdlIGtleS8vYWRkcmVzc2VzCgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjEwNgoJLy8gYWRkcmVzc2VzTGVuZ3RoID0gdGhpcy5taW50cyhhc3NldElkLmlkKS5zaXplIC8gMzMKCWZyYW1lX2RpZyAtMSAvLyBhc3NldElkOiBBc3NldElECglpdG9iCglib3hfbGVuCgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLm1pbnRzKGFzc2V0SWQuaWQpLnNpemUKCWFzc2VydAoJaW50IDMzCgkvCglmcmFtZV9idXJ5IDEgLy8gYWRkcmVzc2VzTGVuZ3RoOiB1aW50NjQKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6MTA3CgkvLyBhZGRyZXNzRm91bmQgPSBmYWxzZQoJaW50IDAKCWZyYW1lX2J1cnkgMiAvLyBhZGRyZXNzRm91bmQ6IGJvb2wKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6MTA4CgkvLyBhZGRyZXNzSW5kZXggPSAwCglpbnQgMAoJZnJhbWVfYnVyeSAzIC8vIGFkZHJlc3NJbmRleDogdWludDY0CgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjEwOQoJLy8gYWRkcmVzc0NsYWltOiBBZGRyZXNzQ2xhaW0gPSB7IGFkZHJlc3M6IGFkZHJlc3MsIG5mdENsYWltOiAwLCBtYnJDbGFpbTogMCB9CglmcmFtZV9kaWcgLTIgLy8gYWRkcmVzczogQWRkcmVzcwoJYnl0ZSAweDAwCgljb25jYXQKCWJ5dGUgMHgwMAoJY29uY2F0CglmcmFtZV9idXJ5IDQgLy8gYWRkcmVzc0NsYWltOiBBZGRyZXNzQ2xhaW0KCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6MTEwCgkvLyBmb3IgKGxldCBpID0gMDsgaSA8IGFkZHJlc3Nlc0xlbmd0aDsgaSArPSAxKQoJaW50IDAKCWZyYW1lX2J1cnkgNSAvLyBpOiB1aW50NjQKCipmb3JfMToKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czoxMTAKCS8vIGkgPCBhZGRyZXNzZXNMZW5ndGgKCWZyYW1lX2RpZyA1IC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIDEgLy8gYWRkcmVzc2VzTGVuZ3RoOiB1aW50NjQKCTwKCWJ6ICpmb3JfMV9lbmQKCgkvLyAqaWYxX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjExMQoJLy8gYWRkcmVzc2VzW2ldLmFkZHJlc3MgPT09IGFkZHJlc3MKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9hZGRyZXNzZXMKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMubWludHMoYXNzZXRJZC5pZCkudmFsdWUKCWFzc2VydAoJZXh0cmFjdCAyIDAKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnQgMCAvLyBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDUgLy8gaTogdWludDY0CglpbnQgMzQKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJaW50IDAgLy8gaGVhZE9mZnNldAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50IDMyCglleHRyYWN0MwoJZnJhbWVfZGlnIC0yIC8vIGFkZHJlc3M6IEFkZHJlc3MKCT09CglieiAqaWYxX2VuZAoKCS8vICppZjFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjExMgoJLy8gYWRkcmVzc0ZvdW5kID0gdHJ1ZQoJaW50IDEKCWZyYW1lX2J1cnkgMiAvLyBhZGRyZXNzRm91bmQ6IGJvb2wKCgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6MTEzCgkvLyBhZGRyZXNzSW5kZXggPSBpCglmcmFtZV9kaWcgNSAvLyBpOiB1aW50NjQKCWZyYW1lX2J1cnkgMyAvLyBhZGRyZXNzSW5kZXg6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xQcm9vZk1pbnQuYWxnby50czoxMTQKCS8vIGFkZHJlc3NDbGFpbSA9IGFkZHJlc3Nlc1tpXQoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2FkZHJlc3NlcwoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5taW50cyhhc3NldElkLmlkKS52YWx1ZQoJYXNzZXJ0CglleHRyYWN0IDIgMAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludCAwIC8vIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgNSAvLyBpOiB1aW50NjQKCWludCAzNAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnQgMzQKCWV4dHJhY3QzCglmcmFtZV9idXJ5IDQgLy8gYWRkcmVzc0NsYWltOiBBZGRyZXNzQ2xhaW0KCWIgKmZvcl8xX2VuZAoKKmlmMV9lbmQ6CgoqZm9yXzFfY29udGludWU6CgkvLyBjb250cmFjdHNcUHJvb2ZNaW50LmFsZ28udHM6MTEwCgkvLyBpICs9IDEKCWZyYW1lX2RpZyA1IC8vIGk6IHVpbnQ2NAoJaW50IDEKCSsKCWZyYW1lX2J1cnkgNSAvLyBpOiB1aW50NjQKCWIgKmZvcl8xCgoqZm9yXzFfZW5kOgoJLy8gY29udHJhY3RzXFByb29mTWludC5hbGdvLnRzOjExOAoJLy8gcmV0dXJuIFthZGRyZXNzRm91bmQsIGFkZHJlc3NJbmRleCwgYWRkcmVzc0NsYWltXTsKCWJ5dGUgMHgwMAoJaW50IDAKCWZyYW1lX2RpZyAyIC8vIGFkZHJlc3NGb3VuZDogYm9vbAoJc2V0Yml0CglmcmFtZV9kaWcgMyAvLyBhZGRyZXNzSW5kZXg6IHVpbnQ2NAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgNCAvLyBhZGRyZXNzQ2xhaW06IEFkZHJlc3NDbGFpbQoJY29uY2F0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gNQoJcmV0c3ViCgoqY3JlYXRlX05vT3A6CgltZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKGFkZHJlc3Mpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY3JlYXRlIE5vT3AKCWVycgoKKmNhbGxfTm9PcDoKCW1ldGhvZCAicmVnaXN0ZXJBY2NvdW50KHN0cmluZyxzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcpdm9pZCIKCW1ldGhvZCAicmVnaXN0ZXJNaW50KHVpbnQ2NCxhZGRyZXNzW10scGF5KXZvaWQiCgltZXRob2QgImNsYWltTmZ0KHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJjbGFpbU1icih1aW50NjQsYWRkcmVzcyl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9yZWdpc3RlckFjY291bnQgKmFiaV9yb3V0ZV9yZWdpc3Rlck1pbnQgKmFiaV9yb3V0ZV9jbGFpbU5mdCAqYWJpX3JvdXRlX2NsYWltTWJyCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJyCgoqaW50VG9Bc2NpaToKCXByb3RvIDEgMQoJYnl0ZSAweDMwMzEzMjMzMzQzNTM2MzczODM5IC8vICIwMTIzNDU2Nzg5IgoJZnJhbWVfZGlnIC0xIC8vIGk6IHVpbnQ2NAoJaW50IDEKCWV4dHJhY3QzCglyZXRzdWIKCQoKKml0b2E6Cglwcm90byAxIDEKCWZyYW1lX2RpZyAtMSAvLyBpOiB1aW50NjQKCWludCAwCgk9PQoJYnogKml0b2FfaWZfZW5kCglieXRlIDB4MzAKCXJldHN1YgoKKml0b2FfaWZfZW5kOgoJZnJhbWVfZGlnIC0xIC8vIGk6IHVpbnQ2NAoJaW50IDEwCgkvCglpbnQgMAoJPgoJYnogKml0b2FfdGVybmFyeV9mYWxzZQoJZnJhbWVfZGlnIC0xIC8vIGk6IHVpbnQ2NAoJaW50IDEwCgkvCgljYWxsc3ViICppdG9hCgliICppdG9hX3Rlcm5hcnlfZW5kCgoqaXRvYV90ZXJuYXJ5X2ZhbHNlOgoJYnl0ZSAweCAvLyAiIgoKKml0b2FfdGVybmFyeV9lbmQ6CglmcmFtZV9kaWcgLTEgLy8gaTogdWludDY0CglpbnQgMTAKCSUKCWNhbGxzdWIgKmludFRvQXNjaWkKCWNvbmNhdAoJcmV0c3ViCgoqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQ6Cglwcm90byA0IDMKCWZyYW1lX2RpZyAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCWNvbmNhdAoJZnJhbWVfYnVyeSAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTEgLy8gZWxlbWVudAoJZHVwCglsZW4KCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJYnRvaQoJKwoJaXRvYgoJZXh0cmFjdCA2IDIKCWZyYW1lX2J1cnkgLTIgLy8gaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMyAvLyB0dXBsZSB0YWlsCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTMgLy8gdHVwbGUgdGFpbAoJZnJhbWVfZGlnIC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMyAvLyB0dXBsZSB0YWlsCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCXJldHN1Yg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ProofMint",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "externalPayee",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "registerAccount",
        "args": [
          {
            "name": "role",
            "type": "string"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "year",
            "type": "string"
          },
          {
            "name": "email",
            "type": "string"
          },
          {
            "name": "contact",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "registerMint",
        "args": [
          {
            "name": "assetId",
            "type": "uint64"
          },
          {
            "name": "addresses",
            "type": "address[]"
          },
          {
            "name": "costs",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimNft",
        "args": [
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimMbr",
        "args": [
          {
            "name": "assetId",
            "type": "uint64"
          },
          {
            "name": "address",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}